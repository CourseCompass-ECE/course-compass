generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Designation {
  COMPUTER
  ELECTRICAL
}

enum SkillOrInterest {
  INTEREST
  SKILL
}

enum Area {
  PHOTONICS_SEMICONDUCTOR
  ENERGY_ELECTROMAGNETICS
  ANALOG_DIGITAL
  CONTROL_COMM_SIGNAL
  HARDWARE_NETWORKS
  SOFTWARE
}

enum MinorOrCertificate {
  MINOR
  CERTIFICATE
}

model User {
  id Int @id @default(autoincrement())
  fullName String
  email String @unique
  password String
  pfpUrl String
  skillsInterests SkillInterest[] @relation("UsersPossessingSkillsInterests")
  eceAreas Area[]
  desiredDesignation Designation
  desiredMinorsCertificates MinorCertificate[] @relation("UsersLikingMinorsCertificates")
  learningGoal String[]
  timetables Timetable[]
  shoppingCart Course[] @relation("ShoppingCart")
  favorites Course[] @relation("Favorites")
  rejectedRecommendations Course[] @relation("RejectedRecommendations")
  emails Email[]
}

model Email {
  id Int @id @default(autoincrement())
  topic String
  subjectLine String
  body String
  to String[]
  cc String[]
  user User @relation(fields: [userId], references: [id])
  userId Int
}

model Course {
  id Int @id @default(autoincrement())
  minorsCertificates MinorCertificate[] @relation("CoursesMeetingMinorsCertificates")
  timetableCourses TimetableCourse[]
  description String
  area Area[]
  code String @unique
  title String
  prerequisiteAmount Int @default(0)
  prerequisites Course[] @relation("Prerequisites")
  prerequisitesOfOthers Course[] @relation("Prerequisites")
  corequisiteAmount Int @default(0)
  corequisites Course[] @relation("Corequisites")
  corequisitesOfOthers Course[] @relation("Corequisites")
  exclusions Course[] @relation("Exclusions")
  exclusionsOfOthers Course[] @relation("Exclusions")
  recommendedPrep Course[] @relation("RecommendedPrep")
  recommendedPrepOfOthers Course[] @relation("RecommendedPrep")
  lectureHours Int @default(0)
  tutorialHours Int @default(0)
  practicalHours Int @default(0)
  inUserShoppingCart User[] @relation("ShoppingCart")
  inUserFavorites User[] @relation("Favorites")
  inUserRejectedRecommendations User[] @relation("RejectedRecommendations")
  skillsInterests SkillInterest[] @relation("CoursesPossessingSkillsInterests")
}

model Timetable {
  id Int @id @default(autoincrement())
  courses TimetableCourse[]
  designation Designation?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  updatedAt DateTime @updatedAt @default(now())
  title String
  description String?
  kernel Area[]
  depth Area[]
  isConflictFree Boolean @default(true)
}

model TimetableCourse {
  id Int @id @default(autoincrement())
  term Int
  position Int
  course Course @relation(fields: [courseId], references: [id])
  courseId Int
  timetable Timetable @relation(fields: [timetableId], references: [id], onDelete: Cascade)
  timetableId Int

  @@unique([courseId, timetableId])
}

model MinorCertificate {
  id Int @id @default(autoincrement())
  courses Course[] @relation("CoursesMeetingMinorsCertificates")
  users User[] @relation("UsersLikingMinorsCertificates")
  title String
  minorOrCertificate MinorOrCertificate

  @@unique([title, minorOrCertificate])
}

model SkillInterest {
  id Int @id @default(autoincrement())
  name String
  isSpecific Boolean @default(true)
  skillOrInterest SkillOrInterest
  users User[] @relation("UsersPossessingSkillsInterests")
  courses Course[] @relation("CoursesPossessingSkillsInterests")

  @@unique([name, skillOrInterest])
}